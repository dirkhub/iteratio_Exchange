#!/usr/bin/env python3
# +-----------------------------------------------------------------+
# |                                                                 |
# |        (  ___ \     | \    /\|\     /||\     /|( (    /|        |
# |        | (   ) )    |  \  / /| )   ( || )   ( ||  \  ( |        |
# |        | (__/ /     |  (_/ / | |   | || (___) ||   \ | |        |
# |        |  __ (      |   _ (  | |   | ||  ___  || (\ \) |        |
# |        | (  \ \     |  ( \ \ | |   | || (   ) || | \   |        |
# |        | )___) )_   |  /  \ \| (___) || )   ( || )  \  |        |
# |        |/ \___/(_)  |_/    \/(_______)|/     \||/    )_)        |
# |                                                                 |
# | Copyright Bastian Kuhn 2018                mail@bastian-kuhn.de |
# +-----------------------------------------------------------------+
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


"""
 Simple Packer and (later) unpacker for MKP Files
 MKP is the Package format for Check_MK
"""
import sys
import os
import io
import json
import tarfile
from datetime import datetime


def usage():
    """
    Print Usage and Exit
    """
    print("Pack and unpack Check_MK MKP Files")
    print("./mkp_packer OPERATION  PACKAGENAME")
    print()
    print("OPERATIONS:")
    print(" - pack (Create MKP File)")
    #print(" - unpack (Get MKP Source")
    print()
    print("PACKAGENAME:")
    print(" - e.g. namexy is  ./namexy/src")


def get_tar_info(name, obj):
    """
    Helper for Tarinfo Creation
    """
    tar_info = tarfile.TarInfo(name)
    tar_info.size = obj.getbuffer().nbytes
    tar_info.mtime = datetime.now().timestamp()
    tar_info.uid = 0
    tar_info.gid = 0
    tar_info.mode = 0o644
    return tar_info


def pack(package_name):
    """
    Pack a MKP File
    """
    path = package_name+"/src"

    #Create  info:
    info_dict = eval(open(path+"/info").read())
    info_json = json.dumps(info_dict).encode('utf-8')

    #Pack Subfolders
    mkp_filename = package_name+"/{name}-{version}.mkp".format(**info_dict)
    with tarfile.open(mkp_filename, "w:gz") as tar:
        tar.add(path+'/info', 'info')

        info_obj = io.BytesIO()
        info_obj.write(info_json)
        info_obj.seek(0)
        tar_info = get_tar_info('info.json', info_obj)
        tar.addfile(tar_info, info_obj)
        for sub_path in os.listdir(path):
            if sub_path in ['info', 'info.json']:
                continue
            sub_filename = sub_path + ".tar"
            sub_obj = io.BytesIO()
            with tarfile.open(sub_filename, "w:", fileobj=sub_obj) as subtar:
                subtar.add(package_name+"/src/"+sub_path, "")

            sub_obj.seek(0)
            tar_info = get_tar_info(sub_filename, sub_obj)
            tar.addfile(tar_info, sub_obj)


if __name__ == "__main__":
    if len(sys.argv) < 3:
        usage()
        sys.exit(1)

    OPERATION = sys.argv[1].lower()
    # beware of empty name, since we add /src as path
    NAME = sys.argv[2].lower()
    if OPERATION == "pack":
        pack(NAME)
    elif OPERATION == "unpack":
        print("NOT YET IMPLEMENTED")
    else:
        usage()
        sys.exit(1)
